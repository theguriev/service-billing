{
  "openapi": "3.0.0",
  "info": {
    "title": "Blls API",
    "description": "An API for interacting with Blls.me\n\n## Transaction Idempotency\n\nThis API supports idempotency for transaction creation to prevent duplicate transactions and ensure safe retries:\n\n- **Automatic Generation**: If no `idempotencyKey` is provided, one will be automatically generated based on the transaction signature\n- **Manual Keys**: You can provide your own `idempotencyKey` (1-64 characters) for better control\n- **Duplicate Prevention**: Transactions with the same `idempotencyKey` will return the existing transaction instead of creating a new one\n- **Backward Compatibility**: Existing clients will continue to work without modification\n\n**Example Usage:**\n```json\n{\n  \"from\": \"0x123...\",\n  \"to\": \"0x456...\",\n  \"value\": 100,\n  \"signature\": \"0xabc...\",\n  \"idempotencyKey\": \"payment-invoice-12345\"\n}\n```",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.example.com"
    }
  ],
  "paths": {
    "/ballance/{address}": {
      "get": {
        "summary": "Get Wallet Balance",
        "description": "Retrieves wallet balance by public address",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Wallet public address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalance"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/activity": {
      "post": {
        "summary": "Check Addresses Activity",
        "description": "Checks if addresses have any transactions (incoming or outgoing)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressesActivityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressesActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error - Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Failed to check addresses activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/ballance": {
      "post": {
        "summary": "Get Multiple Wallet Balances",
        "description": "Retrieves wallet balances for multiple addresses in a single optimized request",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error - Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Failed to fetch balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/tokens": {
      "post": {
        "summary": "Create Token",
        "description": "Creates a new token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "409": {
            "description": "Token already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenPost409Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get All Tokens",
        "description": "Retrieves all tokens",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of tokens to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of tokens to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order (asc or desc)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensList"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{id}": {
      "get": {
        "summary": "Get Token by ID",
        "operationId": "getTokenById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the token to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/issue": {
      "post": {
        "summary": "Issue Token",
        "description": "Issues a token to a specific address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 3,
                    "description": "Symbol of the token (1-3 characters)"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address associated with the token issuance"
                  },
                  "emission": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000000000,
                    "description": "Emission value for the token (1-10000000000)"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Signature for verification"
                  }
                },
                "required": ["symbol", "address", "emission", "signature"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "/tokens/issue"
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 409
                    },
                    "statusMessage": {
                      "type": "string",
                      "example": "Validation Error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating token not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "Verify Signature and Perform Transaction",
        "description": "Verifies a signature and performs a transaction for a specific symbol. Supports idempotency to prevent duplicate transactions - if the same idempotencyKey is provided multiple times, only the first transaction will be processed and the same response will be returned for subsequent requests.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation - transaction created or existing transaction returned if idempotencyKey was already used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors or insufficient funds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "/transactions"
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 400
                    },
                    "statusMessage": {
                      "type": "string",
                      "example": "Validation Error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient funds or Invalid signature"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - duplicate transaction detected (when idempotencyKey conflicts with different transaction data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "/transactions"
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 409
                    },
                    "statusMessage": {
                      "type": "string",
                      "example": "Duplicate transaction"
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction with this idempotency key already exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Transactions",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of transactions to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order (asc or desc)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "Filter transactions by symbol",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Filter transactions by address (to or from)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromAddress",
            "in": "query",
            "description": "Filter transactions by sender address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "query",
            "description": "Filter transactions by recipient address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date filter (timestamp in milliseconds) - Note: different from fromAddress",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date filter (timestamp in milliseconds) - Note: different from toAddress",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/stats": {
      "get": {
        "summary": "Get Transaction Statistics",
        "description": "Retrieves detailed statistics about transactions with filtering options",
        "operationId": "getTransactionStats",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start date filter (timestamp in milliseconds)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date filter (timestamp in milliseconds)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "Filter by token symbol",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for top lists (senders, receivers)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Filter by address (transactions from or to this address)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStats"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/summary": {
      "get": {
        "summary": "Get Transaction Summary",
        "description": "Retrieves a quick summary of transaction metrics for dashboard display",
        "operationId": "getTransactionSummary",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Filter by token symbol",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Filter by address (transactions from or to this address)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSummary"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/bulk": {
      "post": {
        "summary": "Get Bulk Transactions by Addresses",
        "description": "Retrieve transactions for multiple addresses with optional filtering by value, time range, and symbol. Returns transactions grouped by address.",
        "operationId": "getBulkTransactions",
        "tags": ["transactions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MessageRequest": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "minimum": 1
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "privateKey",
          "from",
          "to",
          "value",
          "symbol"
        ]
      },
      "SignedMessage": {
        "type": "string",
        "example": "0x1234567890abcdef"
      },
      "TokenRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "symbol": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3
          },
          "address": {
            "type": "string"
          },
          "emission": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000000000
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "symbol",
          "wallet",
          "emission"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "TokenPost409Error": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "/forgot-password"
          },
          "statusCode": {
            "type": "integer",
            "example": 409
          },
          "statusMessage": {
            "type": "string",
            "example": "Validation Error"
          },
          "message": {
            "type": "string",
            "example": "Validation Error"
          }
        }
      },
      "TokensList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "address": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            }
          }
        }
      },
      "TransactionRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "minimum": 1
          },
          "signature": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "symbol": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3,
            "description": "Token symbol"
          },
          "idempotencyKey": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Optional unique key to ensure transaction idempotency and prevent duplicate transactions. If not provided, will be auto-generated based on the transaction signature. When provided, subsequent requests with the same key will return the existing transaction instead of creating a new one.",
            "example": "user-payment-12345"
          }
        },
        "required": [
          "from",
          "to",
          "value",
          "signature"
        ],
        "example": {
          "from": "0x1234567890123456789012345678901234567890",
          "to": "0x0987654321098765432109876543210987654321",
          "value": 100,
          "signature": "0xabcdef1234567890...",
          "message": "Payment for services",
          "symbol": "BTC",
          "idempotencyKey": "payment-invoice-12345"
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          },
          "idempotencyKey": {
            "type": "string",
            "description": "Unique identifier for this transaction used to prevent duplicates. Auto-generated if not provided in request.",
            "example": "auto-generated-hash-abc123"
          }
        },
        "example": {
          "_id": "507f1f77bcf86cd799439011",
          "from": "0x1234567890123456789012345678901234567890",
          "to": "0x0987654321098765432109876543210987654321",
          "symbol": "BTC",
          "timestamp": "2023-10-10T12:00:00.000Z",
          "message": "Payment for services",
          "value": 100,
          "idempotencyKey": "payment-invoice-12345"
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "TransactionStats": {
        "type": "object",
        "properties": {
          "total": {
            "type": "object",
            "properties": {
              "totalTransactions": {
                "type": "integer",
                "description": "Total number of transactions"
              },
              "totalValue": {
                "type": "number",
                "description": "Total value of all transactions"
              },
              "avgValue": {
                "type": "number",
                "description": "Average transaction value"
              },
              "minValue": {
                "type": "number",
                "description": "Minimum transaction value"
              },
              "maxValue": {
                "type": "number",
                "description": "Maximum transaction value"
              }
            }
          },
          "bySymbol": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Token symbol"
                },
                "count": {
                  "type": "integer",
                  "description": "Number of transactions for this symbol"
                },
                "totalValue": {
                  "type": "number",
                  "description": "Total value for this symbol"
                },
                "avgValue": {
                  "type": "number",
                  "description": "Average value for this symbol"
                }
              }
            }
          },
          "topSenders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Sender address"
                },
                "count": {
                  "type": "integer",
                  "description": "Number of transactions sent"
                },
                "totalSent": {
                  "type": "number",
                  "description": "Total value sent"
                }
              }
            }
          },
          "topReceivers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Receiver address"
                },
                "count": {
                  "type": "integer",
                  "description": "Number of transactions received"
                },
                "totalReceived": {
                  "type": "number",
                  "description": "Total value received"
                }
              }
            }
          },
          "daily": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Date in YYYY-MM-DD format"
                },
                "count": {
                  "type": "integer",
                  "description": "Number of transactions on this date"
                },
                "totalValue": {
                  "type": "number",
                  "description": "Total value of transactions on this date"
                }
              }
            }
          },
          "filters": {
            "type": "object",
            "properties": {
              "dateFrom": {
                "type": "string",
                "description": "Applied from date filter"
              },
              "dateTo": {
                "type": "string",
                "description": "Applied to date filter"
              },
              "symbol": {
                "type": "string",
                "description": "Applied symbol filter"
              },
              "address": {
                "type": "string",
                "description": "Applied address filter"
              },
              "limit": {
                "type": "string",
                "description": "Applied limit for top lists"
              }
            }
          },
          "sent": {
            "type": "object",
            "description": "Statistics for sent transactions (only when address filter is applied)",
            "properties": {
              "bySymbol": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Token symbol"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of sent transactions"
                    },
                    "totalValue": {
                      "type": "number",
                      "description": "Total value sent"
                    }
                  }
                }
              },
              "totalTransactions": {
                "type": "integer",
                "description": "Total number of sent transactions"
              },
              "totalValue": {
                "type": "number",
                "description": "Total value of sent transactions"
              }
            }
          },
          "received": {
            "type": "object",
            "description": "Statistics for received transactions (only when address filter is applied)",
            "properties": {
              "bySymbol": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Token symbol"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of received transactions"
                    },
                    "totalValue": {
                      "type": "number",
                      "description": "Total value received"
                    }
                  }
                }
              },
              "totalTransactions": {
                "type": "integer",
                "description": "Total number of received transactions"
              },
              "totalValue": {
                "type": "number",
                "description": "Total value of received transactions"
              }
            }
          }
        }
      },
      "TransactionSummary": {
        "type": "object",
        "properties": {
          "totalTransactions": {
            "type": "integer",
            "description": "Total number of transactions"
          },
          "totalValue": {
            "type": "number",
            "description": "Total value of all transactions"
          },
          "avgValue": {
            "type": "number",
            "description": "Average transaction value (rounded to 2 decimal places)"
          },
          "uniqueSendersCount": {
            "type": "integer",
            "description": "Number of unique sender addresses"
          },
          "uniqueReceiversCount": {
            "type": "integer",
            "description": "Number of unique receiver addresses"
          },
          "symbolsCount": {
            "type": "integer",
            "description": "Number of unique token symbols"
          },
          "symbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique token symbols"
          },
          "sent": {
            "type": "object",
            "description": "Statistics for sent transactions (only when address filter is applied)",
            "properties": {
              "bySymbol": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Token symbol"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of sent transactions"
                    },
                    "totalValue": {
                      "type": "number",
                      "description": "Total value sent"
                    }
                  }
                }
              },
              "totalTransactions": {
                "type": "integer",
                "description": "Total number of sent transactions"
              },
              "totalValue": {
                "type": "number",
                "description": "Total value of sent transactions"
              }
            }
          },
          "received": {
            "type": "object",
            "description": "Statistics for received transactions (only when address filter is applied)",
            "properties": {
              "bySymbol": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Token symbol"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of received transactions"
                    },
                    "totalValue": {
                      "type": "number",
                      "description": "Total value received"
                    }
                  }
                }
              },
              "totalTransactions": {
                "type": "integer",
                "description": "Total number of received transactions"
              },
              "totalValue": {
                "type": "number",
                "description": "Total value of received transactions"
              }
            }
          }
        }
      },
      "WalletBalance": {
        "type": "object",
        "additionalProperties": {
          "type": "number"
        },
        "description": "Balance by symbol"
      },
      "AddressesActivityRequest": {
        "type": "object",
        "required": ["addresses"],
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 100,
            "description": "Array of wallet addresses to check for activity"
          }
        },
        "example": {
          "addresses": [
            "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
            "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
          ]
        }
      },
      "AddressesActivityResponse": {
        "type": "object",
        "description": "Object mapping each address to its activity status",
        "additionalProperties": {
          "type": "boolean"
        },
        "example": {
          "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa": true,
          "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2": false
        }
      },
      "MultipleBalanceRequest": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 100,
            "description": "Array of wallet addresses (1-100 addresses)"
          }
        },
        "required": ["addresses"]
      },
      "MultipleBalanceResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AddressBalanceResult"
            },
            "description": "Object with address as key and balance result as value"
          },
          "totalAddresses": {
            "type": "integer",
            "description": "Total number of addresses requested"
          },
          "successfulRequests": {
            "type": "integer",
            "description": "Number of successfully processed addresses"
          },
          "failedRequests": {
            "type": "integer",
            "description": "Number of failed address requests"
          }
        },
        "required": ["results", "totalAddresses", "successfulRequests", "failedRequests"],
        "example": {
          "results": {
            "0x1234567890123456789012345678901234567890": {
              "address": "0x1234567890123456789012345678901234567890",
              "ballanceBySymbol": {
                "BTC": 1.5,
                "ETH": 3.2
              },
              "success": true,
              "incomeTransactionCount": 5,
              "outcomeTransactionCount": 2
            },
            "0x0987654321098765432109876543210987654321": {
              "address": "0x0987654321098765432109876543210987654321",
              "ballanceBySymbol": {
                "BTC": 0.5
              },
              "success": true,
              "incomeTransactionCount": 1,
              "outcomeTransactionCount": 0
            }
          },
          "totalAddresses": 2,
          "successfulRequests": 2,
          "failedRequests": 0
        }
      },
      "AddressBalanceResult": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Wallet address"
          },
          "ballanceBySymbol": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "Balance by token symbol"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the balance retrieval was successful"
          },
          "incomeTransactionCount": {
            "type": "integer",
            "description": "Number of incoming transactions"
          },
          "outcomeTransactionCount": {
            "type": "integer",
            "description": "Number of outgoing transactions"
          }
        },
        "required": ["address", "ballanceBySymbol", "success", "incomeTransactionCount", "outcomeTransactionCount"]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Request URL"
          },
          "statusCode": {
            "type": "integer",
            "example": 400
          },
          "statusMessage": {
            "type": "string",
            "example": "Validation Error"
          },
          "message": {
            "type": "string",
            "example": "Validation Error"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code"
                },
                "message": {
                  "type": "string",
                  "description": "Error message"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Path to the invalid field"
                }
              }
            },
            "description": "Validation error details"
          }
        }
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "example": 500
          },
          "statusMessage": {
            "type": "string",
            "example": "Failed to fetch balances"
          },
          "data": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "description": "Error message"
              }
            }
          }
        }
      },
      "BulkTransactionsRequest": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 50,
            "description": "Array of wallet addresses to get transactions for",
            "example": ["0x123abc...", "0x456def..."]
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "description": "Filter by specific transaction value (optional)",
            "example": 100
          },
          "fromTimestamp": {
            "type": "number",
            "minimum": 0,
            "description": "Start timestamp for time range filter (optional)",
            "example": 1640995200000
          },
          "toTimestamp": {
            "type": "number",
            "minimum": 0,
            "description": "End timestamp for time range filter (optional)",
            "example": 1672531200000
          },
          "symbol": {
            "type": "string",
            "minLength": 1,
            "maxLength": 10,
            "description": "Filter by token symbol (optional)",
            "example": "BTC"
          },
          "limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 1000,
            "default": 100,
            "description": "Maximum number of transactions to return"
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Number of transactions to skip"
          },
          "orderBy": {
            "type": "string",
            "enum": ["timestamp", "value", "symbol"],
            "default": "timestamp",
            "description": "Field to order by"
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "default": "desc",
            "description": "Sort order"
          }
        },
        "required": ["addresses"],
        "example": {
          "addresses": ["0x123abc...", "0x456def..."],
          "fromTimestamp": 1640995200000,
          "toTimestamp": 1672531200000,
          "symbol": "BTC",
          "limit": 50
        }
      },
      "BulkTransactionsResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionResponse"
              }
            },
            "description": "Transactions grouped by address",
            "example": {
              "0x123abc...": [
                {
                  "_id": "507f1f77bcf86cd799439011",
                  "from": "0x123abc...",
                  "to": "0x456def...",
                  "value": 100,
                  "symbol": "BTC",
                  "timestamp": "2023-01-01T00:00:00.000Z",
                  "idempotencyKey": "auto-generated-key-123"
                }
              ],
              "0x456def...": []
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "totalAddresses": {
                "type": "number",
                "description": "Total number of addresses queried"
              },
              "addressesWithTransactions": {
                "type": "number",
                "description": "Number of addresses that have transactions"
              },
              "totalTransactions": {
                "type": "number",
                "description": "Total number of transactions returned"
              },
              "limit": {
                "type": "number",
                "description": "Applied limit"
              },
              "offset": {
                "type": "number",
                "description": "Applied offset"
              },
              "orderBy": {
                "type": "string",
                "description": "Applied ordering field"
              },
              "order": {
                "type": "string",
                "description": "Applied sort order"
              },
              "filters": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "fromTimestamp": {
                    "type": "number"
                  },
                  "toTimestamp": {
                    "type": "number"
                  },
                  "symbol": {
                    "type": "string"
                  }
                },
                "description": "Applied filters"
              }
            }
          }
        }
      }
    }
  }
}
